namespace ControllersAndActions.Tests {
[TestClass]
public class ActionTests {
[TestMethod]
public void ControllerTest() {
// Arrange - create the controller
ExampleController target = new ExampleController();
// Act - call the action method
ViewResult result = target.Index();
// Assert - check the result
Assert.AreEqual("Homepage", result.ViewName);
}
}
}

[TestClass]
public class ImageTests {
[TestMethod]
public void Can Retrieve Image Data() {
// Arrange - create a Product with image data
Product prod = new Product {
ProductID = 2,
Name = "Test",
ImageData = new byte[] { },
ImageMimeType = "image/png"
};
// Arrange - create the mock repository
Mock<IProductRepository> mock = new Mock<IProductRepository>();
mock.Setup(m => m.Products).Returns(new Product[] {
new Product {ProductID = 1, Name = "P1"},
prod,
new Product {ProductID = 3, Name = "P3"}
}.AsQueryable());
// Arrange - create the controller
ProductController target = new ProductController(mock.Object);
// Act - call the GetImage action method
ActionResult result = target.GetImage(2);
// Assert
Assert.IsNotNull(result);
Assert.IsInstanceOfType(result, typeof(FileResult));
Assert.AreEqual(prod.ImageMimeType, ((FileResult)result).ContentType);
}

[TestMethod]
public void Cannot Retrieve Image Data For Invalid ID() {
// Arrange - create the mock repository
Mock<IProductRepository> mock = new Mock<IProductRepository>();
mock.Setup(m => m.Products).Returns(new Product[] {
new Product {ProductID = 1, Name = "P1"},
new Product {ProductID = 2, Name = "P2"}
}.AsQueryable());
// Arrange - create the controller
ProductController target = new ProductController(mock.Object);
// Act - call the GetImage action method
ActionResult result = target.GetImage(100);
// Assert
Assert.IsNull(result);
}
}
